// Author: github.com/zacpeelyates
// Project: Card-Pipeline
// Filename: GAME_TRIGGER.cs
// Modified: 2023/05/21 @ 19:22


#region

using System;
using System.Collections.Generic;
using System.Text;
using UnityEngine;

#endregion

public enum GAME_TRIGGER_OFFSET
{
    TurnPhase = 0,
    GameAction = 1,
    TriggeredAction = 2,
}

//[InspectorName(null)] prevents offsets from being displayed in inspector and prevents them from being selected in dropdowns
public enum GAME_TRIGGER
{
    None = -1,

    //Turnphase
    [InspectorName(null)] TURNPHASE = GameTriggerHelper.OFFSET * GAME_TRIGGER_OFFSET.TurnPhase,
    TurnPhaseStart,
    TurnPhaseDraw,
    TurnPhasePreCombat,
    TurnPhaseCombat,
    TurnPhasePostCombat,
    TurnPhaseEnd,

    //GammeActions
    [InspectorName(null)] GAMEACTION = GameTriggerHelper.OFFSET * GAME_TRIGGER_OFFSET.GameAction,
    GameActionPlayCard,
    GameActionAttack,
    GameActionDrawCard,

    //TriggeredActions
    [InspectorName(null)] TRIGGEREDACTIONS = GameTriggerHelper.OFFSET * GAME_TRIGGER_OFFSET.TriggeredAction,
    TriggeredActionDealDamage,
    TriggeredActionDealCombatDamage,
    TriggeredActionReceiveDamage,
    TriggeredActionHealed,
    TriggeredActionBuffed,
    TriggeredActionEnters,
    TriggeredActionDies,
}

[Flags]
public enum PLAYER_CONDITION_FLAGS
{
    Neither = 0,
    Your = 1 << 0,
    Opponent = 1 << 1,

}


public static class GameTriggerHelper
{
    public const int OFFSET = 10;
    public static List<GAME_TRIGGER> Triggers;

    public static List<GAME_TRIGGER> SetupTriggerList()
    {
        Triggers = new List<GAME_TRIGGER>();
        foreach (GAME_TRIGGER i in Enum.GetValues(typeof(GAME_TRIGGER)))
        {
            if ((int)i % OFFSET == 0) continue;
            Triggers.Add(i);
        }

        return Triggers;
    }

    //Gets all values between OFFSET_START and OFFSET_END
    public static List<GAME_TRIGGER> GetValuesOfType(GAME_TRIGGER_OFFSET type)
    {
        List<GAME_TRIGGER> list = new();
        foreach (GAME_TRIGGER i in Enum.GetValues(typeof(GAME_TRIGGER)))
        {
            if ((int)i <= OffsetValue(type)) continue;
            if ((int)i % OFFSET == 0) break;
            list.Add(i);
        }
        
        return list;
    }

    public static string GetDisplayName(this GAME_TRIGGER trigger)
    {
        if (trigger == GAME_TRIGGER.None || (int)trigger % OFFSET == 0) return trigger.ToString();
        string[] parts = trigger.ToString().Trim().SplitOnCapitals();
        StringBuilder sb = new(parts[2]); //remove redundant identifiers
        for (int i = 3; i < parts.Length; i++)
        {
            sb.Append(parts[i]);
            if (i != parts.Length - 1) sb.Append(" ");
        }
        return sb.ToString();
    }

    public static bool IsOfType(this GAME_TRIGGER trigger, GAME_TRIGGER_OFFSET type)
    {
        int i = (int)trigger - (int)type * OFFSET;
        return i is > 0 and < OFFSET;
    }

    public static GAME_TRIGGER_OFFSET GetTriggerType(this GAME_TRIGGER trigger)
    {
        return (GAME_TRIGGER_OFFSET)((int)trigger / OFFSET);
    }

    public static int OffsetValue(this GAME_TRIGGER_OFFSET off)
    {
        return (int)off * OFFSET;
    }

    public static bool MeetsTurnCondition(this PLAYER_CONDITION_FLAGS flags, Player perspective)
    {
        if (flags.HasAllFlags()) return true;
        GameStateManager gsm = GameStateManager.GetInstance();
        if (flags.MeetsCondition(PLAYER_CONDITION_FLAGS.Your) && gsm.IsPlayerTurn(perspective)) return true;
        return flags.MeetsCondition(PLAYER_CONDITION_FLAGS.Opponent) && !gsm.IsPlayerTurn(perspective);
    }

    public static bool MeetsCondition(this PLAYER_CONDITION_FLAGS flags, PLAYER_CONDITION_FLAGS condition)
    {
        return (flags & condition) > 0;
    }

    public static List<GAME_TRIGGER> GetTriggerList()
    {
        return Triggers ?? SetupTriggerList();
    }

    public static string Display(this PLAYER_CONDITION_FLAGS flags)
    {
        if((int)flags == -1) return "Either"; //handles autogenerated Everything flag printing -1 instead of Either
        return flags.ToString();
    }
}